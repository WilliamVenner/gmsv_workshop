name: build

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  ACTIONS_RUNNER_FORCED_INTERNAL_NODE_VERSION: node16
  ACTIONS_RUNNER_FORCE_ACTIONS_NODE_VERSION: node16
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  build_linux:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    steps:
    - name: Checkout
      run: |
        git config --global --add safe.directory .
        git clone --depth=1 https://github.com/${{ github.repository }}.git .
        git fetch --prune --depth=1 origin ${{ github.ref }}
        git checkout ${{ github.sha }}
    - name: Install build dependencies
      run: yum -y install glibc-devel.i686 libgcc.i686 libstdc++-devel.i686
    - name: Install nightly toolchain
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain nightly-2025-03-08 --profile minimal
        echo "CARGO_HOME=$HOME/.cargo" >> $GITHUB_ENV
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: Add targets
      run: rustup target add x86_64-unknown-linux-gnu && rustup target add i686-unknown-linux-gnu
    - name: Build 32-bit
      run: export CC=$(which gcc) && cargo build --release --target i686-unknown-linux-gnu
    - name: Build 64-bit
      run: cargo build --release --target x86_64-unknown-linux-gnu
    - name: Strip debug symbols
      run: |
        strip target/i686-unknown-linux-gnu/release/libgmsv_workshop.so
        strip target/x86_64-unknown-linux-gnu/release/libgmsv_workshop.so
    - name: Rename binaries
      run: |
        mv target/i686-unknown-linux-gnu/release/libgmsv_workshop.so target/i686-unknown-linux-gnu/release/gmsv_workshop_linux.dll
        mv target/x86_64-unknown-linux-gnu/release/libgmsv_workshop.so target/x86_64-unknown-linux-gnu/release/gmsv_workshop_linux64.dll
    - name: Release
      run: |
        API_URL="https://api.github.com/repos/${{ github.repository }}/releases"
        TAG_NAME="${{ github.ref_name }}"
        AUTH_HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"

        # Create the release and get the upload URL
        RESPONSE=$(curl -s -X POST -H "$AUTH_HEADER" -H "Content-Type: application/json" \
          -d '{"tag_name": "'"$TAG_NAME"'", "name": "'"$TAG_NAME"'", "body": "Release '"$TAG_NAME"'", "draft": false, "prerelease": false}' \
          "$API_URL")

        UPLOAD_URL=$(echo "$RESPONSE" | jq -r .upload_url | sed 's/{?name,label}//')

        # Upload files
        for file in target/x86_64-unknown-linux-gnu/release/gmsv_workshop_linux64.dll target/i686-unknown-linux-gnu/release/gmsv_workshop_linux.dll; do
          FILE_NAME=$(basename "$file")
          curl -X POST -H "$AUTH_HEADER" -H "Content-Type: application/octet-stream" --data-binary @"$file" "$UPLOAD_URL?name=$FILE_NAME"
        done

  build_windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install nightly toolchain
      run: rustup toolchain install nightly-2025-03-08
    - name: Add targets
      run: rustup target add x86_64-pc-windows-msvc && rustup target add i686-pc-windows-msvc
    - name: Build 64-bit
      run: cargo build --release --target x86_64-pc-windows-msvc
      env:
        RUSTFLAGS: -Ctarget-feature=+crt-static
    - name: Build 32-bit
      run: cargo build --release --target i686-pc-windows-msvc
      env:
        RUSTFLAGS: -Ctarget-feature=+crt-static
    - name: Rename binaries
      run: |
        mv target/i686-pc-windows-msvc/release/gmsv_workshop.dll target/i686-pc-windows-msvc/release/gmsv_workshop_win32.dll
        mv target/x86_64-pc-windows-msvc/release/gmsv_workshop.dll target/x86_64-pc-windows-msvc/release/gmsv_workshop_win64.dll
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          target/i686-pc-windows-msvc/release/gmsv_workshop_win32.dll
          target/x86_64-pc-windows-msvc/release/gmsv_workshop_win64.dll
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}